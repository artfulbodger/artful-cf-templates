# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: "2010-09-09"
Description: "Configures Security Hub in this Region as the aggregation Region."
Parameters:
  RegionLinkingMode:
    Type: String
    AllowedValues:
      - ALL_REGIONS
      - ALL_REGIONS_EXCEPT_SPECIFIED
      - SPECIFIED_REGIONS
    Description: >
      Indicates whether to aggregate findings from all of the available Regions in the current partition.
      Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
    Default: "ALL_REGIONS"
  Regions:
    Type: String
    Description: >
      If RegionLinkingMode is ALL_REGIONS_EXCEPT_SPECIFIED, then this is a space-separated list of Regions that do not aggregate findings to the aggregation Region.
      If RegionLinkingMode is SPECIFIED_REGIONS, then this is a space-separated list of Regions that do aggregate findings to the aggregation Region.

Resources:
  LambdaFunctionEnableSHXRAggregation:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          # SPDX-License-Identifier: MIT-0
          import json,boto3,os,cfnresponse
          from botocore.exceptions import ClientError

          def lambda_handler(event, context):
            print('Event: ' + json.dumps(event))
            if (event['RequestType'] == 'Create' or event['RequestType'] == 'Update'):
              try:                
                region = os.environ['AWS_REGION']
                securityhub_client = boto3.client('securityhub', region_name=region)
                response = securityhub_client.create_finding_aggregator(RegionLinkingMode='ALL_REGIONS')
                print(response)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {},"LambdaFunctionEnableSHXRAggregationInvoke")
              except Exception as ex:
                print(ex)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
            else:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Handler: index.lambda_handler
      Role: !GetAtt IAMRoleEnableSHXRAggregation.Arn
      Runtime: python3.8
      FunctionName: LambdaFunctionEnableSHXRAggregation
      MemorySize: 256
      Timeout: 300
      Description: Lambda that enables SecurityHub Cross-Region Aggregation

  IAMRoleEnableSHXRAggregation:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SecurityHubManageXRAggregation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - securityhub:CreateFindingAggregator
                  - securityhub:UpdateFindingAggregator
                Resource:
                  - !Sub "arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:/findingAggregator/create"

  LambdaFunctionEnableSHXRAggregationInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaFunctionEnableSHXRAggregation.Arn
